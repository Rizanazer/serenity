// server.js

const express = require('express');
const mongoose = require('mongoose');
const multer = require('multer');
const path = require('path');
const axios = require('axios');

const app = express();

// MongoDB Connection
mongoose.connect('mongodb://localhost:27017/media-upload', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));
db.once('open', () => console.log('Connected to MongoDB'));

// Schema and Model
const mediaSchema = new mongoose.Schema({
  filename: String,
  path: String,
  type: String,
});
const Media = mongoose.model('Media', mediaSchema);

// Multer Storage Configuration
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  },
});
const upload = multer({ storage });

// Routes
app.post('/upload/video', upload.single('video'), async (req, res) => {
  try {
    const { filename, path } = req.file;
    const newVideo = new Media({ filename, path, type: 'video' });
    await newVideo.save();
    res.status(201).send('Video uploaded successfully');

    // Notify client about the uploaded video
    axios.post('http://localhost:3000/notify', { filename, path, type: 'video' });
  } catch (error) {
    console.error('Error uploading video:', error);
    res.status(500).send('Internal Server Error');
  }
});

app.post('/upload/voice', upload.single('voice'), async (req, res) => {
  try {
    const { filename, path } = req.file;
    const newVoice = new Media({ filename, path, type: 'voice' });
    await newVoice.save();
    res.status(201).send('Voice uploaded successfully');

    // Notify client about the uploaded voice
    axios.post('http://localhost:3000/notify', { filename, path, type: 'voice' });
  } catch (error) {
    console.error('Error uploading voice:', error);
    res.status(500).send('Internal Server Error');
  }
});

// Notification route for client
app.post('/notify', (req, res) => {
  console.log('Media uploaded:', req.body);
  // Perform any necessary actions here
  res.status(200).send('Notification received');
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
